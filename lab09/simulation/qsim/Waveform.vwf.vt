// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/15/2019 22:03:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab09
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab09_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg [7:0] C;
reg Cin;
reg [7:0] D;
reg S0;
reg S1;
reg S2;
reg clock;
reg l;
reg [1:0] s;
// wires                                               
wire [7:0] G;

// assign statements (if any)                          
lab09 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.Cin(Cin),
	.D(D),
	.G(G),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.clock(clock),
	.l(l),
	.s(s)
);
initial 
begin 
#1000000 $finish;
end 

// l
initial
begin
	l = 1'b1;
	l = #150000 1'b0;
end 

// clock
initial
begin
	clock = 1'b1;
	# 12500;
	repeat(39)
	begin
		clock = 1'b0;
		clock = #12500 1'b1;
		# 12500;
	end
	clock = 1'b0;
end 

// S2
initial
begin
	S2 = 1'b0;
end 

// S1
initial
begin
	S1 = 1'b0;
	S1 = #25000 1'b1;
	S1 = #25000 1'b0;
	S1 = #25000 1'b1;
	S1 = #25000 1'b0;
end 

// S0
initial
begin
	S0 = 1'b1;
	S0 = #25000 1'b0;
	S0 = #25000 1'b1;
	S0 = #25000 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
	Cin = #25000 1'b1;
	Cin = #25000 1'b0;
	Cin = #25000 1'b1;
	Cin = #25000 1'b0;
end 
// s[ 1 ]
initial
begin
	s[1] = 1'b0;
	s[1] = #50000 1'b1;
	s[1] = #50000 1'b0;
end 
// s[ 0 ]
initial
begin
	repeat(2)
	begin
		s[0] = 1'b0;
		s[0] = #25000 1'b1;
		# 25000;
	end
	s[0] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 
// C[ 7 ]
initial
begin
	C[7] = 1'b0;
end 
// C[ 6 ]
initial
begin
	C[6] = 1'b0;
end 
// C[ 5 ]
initial
begin
	C[5] = 1'b1;
end 
// C[ 4 ]
initial
begin
	C[4] = 1'b1;
end 
// C[ 3 ]
initial
begin
	C[3] = 1'b0;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b0;
end 
// C[ 1 ]
initial
begin
	C[1] = 1'b0;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b0;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b1;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b1;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b1;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b0;
end 
endmodule

