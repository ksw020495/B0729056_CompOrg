// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/10/2020 13:19:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab10
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab10_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] AA;
reg [1:0] BA;
reg CLK;
reg [7:0] ConstantIn;
reg [1:0] DA;
reg [7:0] DataIn;
reg [3:0] FS;
reg MB;
reg MD;
reg RW;
// wires                                               
wire [7:0] AddressOut;
wire C;
wire [7:0] DataOut;
wire N;
wire V;
wire Z;

// assign statements (if any)                          
lab10 i1 (
// port map - connection between master ports and signals/registers   
	.AA(AA),
	.AddressOut(AddressOut),
	.BA(BA),
	.C(C),
	.CLK(CLK),
	.ConstantIn(ConstantIn),
	.DA(DA),
	.DataIn(DataIn),
	.DataOut(DataOut),
	.FS(FS),
	.MB(MB),
	.MD(MD),
	.N(N),
	.RW(RW),
	.V(V),
	.Z(Z)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	CLK = 1'b1;
	# 50000;
	repeat(9)
	begin
		CLK = 1'b0;
		CLK = #50000 1'b1;
		# 50000;
	end
	CLK = 1'b0;
end 

// RW
initial
begin
	RW = 1'b1;
	RW = #200000 1'b0;
	RW = #100000 1'b1;
	RW = #300000 1'b0;
end 
// AA[ 1 ]
initial
begin
	AA[1] = 1'b0;
	AA[1] = #400000 1'b1;
	AA[1] = #200000 1'b0;
end 
// AA[ 0 ]
initial
begin
	AA[0] = 1'b0;
	AA[0] = #300000 1'b1;
	AA[0] = #300000 1'b0;
end 
// BA[ 1 ]
initial
begin
	BA[1] = 1'b0;
	BA[1] = #200000 1'b1;
end 
// BA[ 0 ]
initial
begin
	BA[0] = 1'b0;
	BA[0] = #100000 1'b1;
	BA[0] = #100000 1'b0;
	BA[0] = #200000 1'b1;
end 
// DA[ 1 ]
initial
begin
	DA[1] = 1'b0;
	DA[1] = #100000 1'b1;
	DA[1] = #100000 1'b0;
	DA[1] = #100000 1'b1;
	DA[1] = #300000 1'b0;
end 
// DA[ 0 ]
initial
begin
	DA[0] = 1'b1;
	DA[0] = #100000 1'b0;
	DA[0] = #200000 1'b1;
	DA[0] = #300000 1'b0;
end 
// ConstantIn[ 7 ]
initial
begin
	ConstantIn[7] = 1'b0;
end 
// ConstantIn[ 6 ]
initial
begin
	ConstantIn[6] = 1'b0;
end 
// ConstantIn[ 5 ]
initial
begin
	ConstantIn[5] = 1'b0;
end 
// ConstantIn[ 4 ]
initial
begin
	ConstantIn[4] = 1'b0;
end 
// ConstantIn[ 3 ]
initial
begin
	ConstantIn[3] = 1'b0;
end 
// ConstantIn[ 2 ]
initial
begin
	ConstantIn[2] = 1'b0;
end 
// ConstantIn[ 1 ]
initial
begin
	ConstantIn[1] = 1'b0;
end 
// ConstantIn[ 0 ]
initial
begin
	ConstantIn[0] = 1'b0;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
	DataIn[5] = #100000 1'b1;
	DataIn[5] = #100000 1'b0;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b1;
	DataIn[1] = #100000 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b1;
	DataIn[0] = #100000 1'b0;
end 
// FS[ 3 ]
initial
begin
	FS[3] = 1'b0;
	FS[3] = #400000 1'b1;
	FS[3] = #100000 1'b0;
end 
// FS[ 2 ]
initial
begin
	FS[2] = 1'b0;
	FS[2] = #300000 1'b1;
	FS[2] = #100000 1'b0;
end 
// FS[ 1 ]
initial
begin
	FS[1] = 1'b0;
	FS[1] = #400000 1'b1;
	FS[1] = #100000 1'b0;
end 
// FS[ 0 ]
initial
begin
	FS[0] = 1'b0;
	FS[0] = #300000 1'b1;
	FS[0] = #300000 1'b0;
end 

// MB
initial
begin
	MB = 1'b0;
end 

// MD
initial
begin
	MD = 1'b1;
	MD = #200000 1'b0;
end 
endmodule

