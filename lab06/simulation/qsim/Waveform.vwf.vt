// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2019 16:51:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab06
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab06_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg A4;
reg A5;
reg A6;
reg A7;
reg B0;
reg B1;
reg B2;
reg B3;
reg B4;
reg B5;
reg B6;
reg B7;
reg C0;
reg C1;
reg C2;
reg C3;
reg C4;
reg C5;
reg C6;
reg C7;
reg CLK;
reg D0;
reg D1;
reg D2;
reg D3;
reg D4;
reg D5;
reg D6;
reg D7;
reg S0;
reg S1;
// wires                                               
wire pin_name1;
wire pin_name2;
wire pin_name3;
wire pin_name4;
wire pin_name5;
wire pin_name6;
wire pin_name7;
wire pin_name8;

// assign statements (if any)                          
lab06 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.A6(A6),
	.A7(A7),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B5(B5),
	.B6(B6),
	.B7(B7),
	.C0(C0),
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.C6(C6),
	.C7(C7),
	.CLK(CLK),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.pin_name6(pin_name6),
	.pin_name7(pin_name7),
	.pin_name8(pin_name8),
	.S0(S0),
	.S1(S1)
);
initial 
begin 
#16000000 $finish;
end 

// A0
initial
begin
	A0 = 1'b1;
end 

// A1
initial
begin
	A1 = 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
end 

// A3
initial
begin
	A3 = 1'b0;
end 

// A4
initial
begin
	A4 = 1'b0;
end 

// A5
initial
begin
	A5 = 1'b0;
end 

// A6
initial
begin
	A6 = 1'b0;
end 

// A7
initial
begin
	A7 = 1'b0;
end 

// B0
initial
begin
	B0 = 1'b1;
end 

// B1
initial
begin
	B1 = 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// B4
initial
begin
	B4 = 1'b0;
end 

// B5
initial
begin
	B5 = 1'b0;
end 

// B6
initial
begin
	B6 = 1'b0;
end 

// B7
initial
begin
	B7 = 1'b0;
end 

// C0
initial
begin
	C0 = 1'b1;
end 

// C1
initial
begin
	C1 = 1'b0;
end 

// C2
initial
begin
	C2 = 1'b0;
end 

// C3
initial
begin
	C3 = 1'b0;
end 

// C4
initial
begin
	C4 = 1'b0;
end 

// C5
initial
begin
	C5 = 1'b0;
end 

// C6
initial
begin
	C6 = 1'b0;
end 

// C7
initial
begin
	C7 = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500000 1'b1;
	#500000;
end 

// D0
initial
begin
	D0 = 1'b1;
end 

// D1
initial
begin
	D1 = 1'b0;
end 

// D2
initial
begin
	D2 = 1'b0;
end 

// D3
initial
begin
	D3 = 1'b0;
end 

// D4
initial
begin
	D4 = 1'b0;
end 

// D5
initial
begin
	D5 = 1'b0;
end 

// D6
initial
begin
	D6 = 1'b0;
end 

// D7
initial
begin
	D7 = 1'b0;
end 

// S0
initial
begin
	S0 = 1'b0;
	S0 = #1000000 1'b1;
	S0 = #1000000 1'b0;
	S0 = #1000000 1'b1;
	S0 = #1000000 1'b0;
end 

// S1
initial
begin
	S1 = 1'b0;
	S1 = #2000000 1'b1;
	S1 = #2000000 1'b0;
end 
endmodule

