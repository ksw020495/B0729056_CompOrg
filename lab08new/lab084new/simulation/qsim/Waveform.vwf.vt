// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/12/2019 19:30:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab084new
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab084new_vlg_vec_tst();
// constants                                           
// general purpose registers
reg T;
reg X;
reg clock;
// wires                                               
wire Q0;
wire Q1;

// assign statements (if any)                          
lab084new i1 (
// port map - connection between master ports and signals/registers   
	.Q0(Q0),
	.Q1(Q1),
	.T(T),
	.X(X),
	.clock(clock)
);
initial 
begin 
#16000000 $finish;
end 

// clock
initial
begin
	clock = 1'b1;
	# 500000;
	repeat(15)
	begin
		clock = 1'b0;
		clock = #500000 1'b1;
		# 500000;
	end
	clock = 1'b0;
end 

// X
initial
begin
	X = 1'b1;
	X = #1000000 1'b0;
end 

// T
initial
begin
	T = 1'b0;
	T = #3000000 1'b1;
	T = #1000000 1'b0;
end 
endmodule

